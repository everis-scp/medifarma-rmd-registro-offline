/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define([], function () {
  "use strict";

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var writeChildren = function (val) {
    if (Array.isArray(val)) {
      return val.join("");
    } else {
      return val;
    }
  };

  var addChildAggregation = function (aggregationChildren, aggregationName, child) {
    if (child === undefined) {
      return;
    }

    if (!aggregationChildren[aggregationName]) {
      aggregationChildren[aggregationName] = [];
    }

    if (typeof child === "string" && child.trim().length > 0) {
      aggregationChildren[aggregationName].push(child);
    } else if (Array.isArray(child)) {
      child.forEach(function (subChild) {
        addChildAggregation(aggregationChildren, aggregationName, subChild);
      });
    } else {
      Object.keys(child).forEach(function (childKey) {
        addChildAggregation(aggregationChildren, childKey, child[childKey]);
      });
    }
  };

  var jsx = function (type, mSettings) {
    var metadata = type.getMetadata();
    var namesSplit = metadata.getName().split(".");
    var metadataProperties = metadata.getAllProperties();
    var metadataAggregations = metadata.getAllAggregations();
    var namespace = namesSplit.slice(0, -1);
    var name = namesSplit[namesSplit.length - 1];
    var namespaceAlias = namespace[namespace.length - 1];
    var tagName = "".concat(namespaceAlias, ":").concat(name);
    var propertiesString = [];
    var aggregationString = [];
    var defaultAggregationName = metadata.getDefaultAggregationName();
    Object.keys(metadataProperties).forEach(function (propertyName) {
      if (mSettings.hasOwnProperty(propertyName)) {
        propertiesString.push("".concat(propertyName, "=\"").concat(mSettings[propertyName], "\""));
      }
    });

    var aggregationChildren = _defineProperty({}, defaultAggregationName, []);

    addChildAggregation(aggregationChildren, defaultAggregationName, mSettings.children);
    Object.keys(metadataAggregations).forEach(function (aggregationName) {
      if ((aggregationChildren === null || aggregationChildren === void 0 ? void 0 : aggregationChildren.hasOwnProperty(aggregationName)) && aggregationChildren[aggregationName].length > 0) {
        aggregationString.push("<".concat(namespaceAlias, ":").concat(aggregationName, ">\n\t\t\t\t\t\t").concat(writeChildren(aggregationChildren[aggregationName]), "\n\t\t\t\t\t</").concat(namespaceAlias, ":").concat(aggregationName, ">"));
      }

      if (mSettings.hasOwnProperty(aggregationName)) {
        propertiesString.push("".concat(aggregationName, "='").concat(JSON.stringify(mSettings[aggregationName]), "'"));
      }
    });
    return "<".concat(tagName, " xmlns:").concat(namespaceAlias, "=\"").concat(namespace.join("."), "\" ").concat(propertiesString.join(" "), ">").concat(aggregationString.join(""), "</").concat(tagName, ">");
  };

  return jsx;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,