/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["../ManifestSettings", "../controls/ObjectPage/SubSection", "../controls/ObjectPage/HeaderFacet", "../helpers/ID", "../helpers/ConfigurableObject", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/objectPage/HeaderAndFooterAction", "sap/fe/core/helpers/BindingExpression"], function (ManifestSettings, SubSection, HeaderFacet, ID, ConfigurableObject, Action, HeaderAndFooterAction, BindingExpression) {
  "use strict";

  var _exports = {};
  var not = BindingExpression.not;
  var equal = BindingExpression.equal;
  var compileBinding = BindingExpression.compileBinding;
  var annotationExpression = BindingExpression.annotationExpression;
  var getHiddenHeaderActions = HeaderAndFooterAction.getHiddenHeaderActions;
  var getFooterDefaultActions = HeaderAndFooterAction.getFooterDefaultActions;
  var getHeaderDefaultActions = HeaderAndFooterAction.getHeaderDefaultActions;
  var removeDuplicateActions = Action.removeDuplicateActions;
  var getActionsFromManifest = Action.getActionsFromManifest;
  var Placement = ConfigurableObject.Placement;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var SectionID = ID.SectionID;
  var EditableHeaderSectionID = ID.EditableHeaderSectionID;
  var CustomSectionID = ID.CustomSectionID;
  var getHeaderFacetsFromManifest = HeaderFacet.getHeaderFacetsFromManifest;
  var getHeaderFacetsFromAnnotations = HeaderFacet.getHeaderFacetsFromAnnotations;
  var createCustomHeaderFacetSubSections = SubSection.createCustomHeaderFacetSubSections;
  var createSubSections = SubSection.createSubSections;
  var createCustomSubSections = SubSection.createCustomSubSections;
  var TemplateType = ManifestSettings.TemplateType;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var getSectionKey = function (facetDefinition, fallback) {
    var _facetDefinition$ID, _facetDefinition$Labe;

    return ((_facetDefinition$ID = facetDefinition.ID) === null || _facetDefinition$ID === void 0 ? void 0 : _facetDefinition$ID.toString()) || ((_facetDefinition$Labe = facetDefinition.Label) === null || _facetDefinition$Labe === void 0 ? void 0 : _facetDefinition$Labe.toString()) || fallback;
  };
  /**
   * Creates a section that represents the editable header part; it is only visible in edit mode.
   *
   * @param converterContext The converter context
   * @param allHeaderFacets The converter context
   * @returns {ObjectPageSection} The section representing the editable header parts
   */


  function createEditableHeaderSection(converterContext, allHeaderFacets) {
    var _converterContext$get, _converterContext$get2;

    var editableHeaderSectionID = EditableHeaderSectionID();
    var headerFacets = (_converterContext$get = converterContext.getEntityType().annotations) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.UI) === null || _converterContext$get2 === void 0 ? void 0 : _converterContext$get2.HeaderFacets;
    var headerfacetSubSections = headerFacets ? createSubSections(headerFacets, converterContext, true) : [];
    var customHeaderFacetSubSections = createCustomHeaderFacetSubSections(converterContext);
    var allHeaderFacetsSubSections = [];

    if (customHeaderFacetSubSections.length > 0) {
      // merge annotation based header facets and custom header facets in the right order
      var i = 0;
      allHeaderFacets.forEach(function (item) {
        // hidden header facets are not included in allHeaderFacets array => add them anyway
        while (headerfacetSubSections.length > i && headerfacetSubSections[i].visible === "false") {
          allHeaderFacetsSubSections.push(headerfacetSubSections[i]);
          i++;
        }

        if (headerfacetSubSections.length > i && (item.key === headerfacetSubSections[i].key || // for header facets with no id the keys of header facet and subsection are different => check only the last part
        item.key.slice(item.key.lastIndexOf("::") + 2) === headerfacetSubSections[i].key.slice(headerfacetSubSections[i].key.lastIndexOf("::") + 2))) {
          allHeaderFacetsSubSections.push(headerfacetSubSections[i]);
          i++;
        } else {
          customHeaderFacetSubSections.forEach(function (customItem) {
            if (item.key === customItem.key) {
              allHeaderFacetsSubSections.push(customItem);
            }
          });
        }
      });
    } else {
      allHeaderFacetsSubSections = headerfacetSubSections;
    }

    var headerSection = {
      id: editableHeaderSectionID,
      key: "EditableHeaderContent",
      title: "{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}",
      visible: "{= ${ui>/editMode} === 'Editable' }",
      subSections: allHeaderFacetsSubSections
    };
    return headerSection;
  }
  /**
   * Creates a definition for a section based on the Facet annotation.
   *
   * @param converterContext The converter context
   * @returns {ObjectPageSection[]} All sections
   */


  _exports.createEditableHeaderSection = createEditableHeaderSection;

  function getSectionsFromAnnotation(converterContext) {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3;

    var entityType = converterContext.getEntityType();
    var objectPageSections = ((_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.Facets) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.map(function (facetDefinition) {
      return getSectionFromAnnotation(facetDefinition, converterContext);
    })) || [];
    return objectPageSections;
  }
  /**
   * Create an annotation based section.
   *
   * @param facet
   * @param converterContext
   * @returns {ObjectPageSection} The current section
   */


  function getSectionFromAnnotation(facet, converterContext) {
    var _facet$annotations, _facet$annotations$UI, _facet$annotations$UI2;

    var sectionID = SectionID({
      Facet: facet
    });
    var section = {
      id: sectionID,
      key: getSectionKey(facet, sectionID),
      title: compileBinding(annotationExpression(facet.Label)),
      showTitle: !!facet.Label,
      visible: compileBinding(not(equal(annotationExpression((_facet$annotations = facet.annotations) === null || _facet$annotations === void 0 ? void 0 : (_facet$annotations$UI = _facet$annotations.UI) === null || _facet$annotations$UI === void 0 ? void 0 : (_facet$annotations$UI2 = _facet$annotations$UI.Hidden) === null || _facet$annotations$UI2 === void 0 ? void 0 : _facet$annotations$UI2.valueOf()), true))),
      subSections: createSubSections([facet], converterContext)
    };
    return section;
  }
  /**
   * Creates section definition based on manifest definition.
   * @param manifestSections The manifest defined sections
   * @param converterContext
   * @returns {Record<string, CustomObjectPageSection>} The manifest defined sections
   */


  function getSectionsFromManifest(manifestSections, converterContext) {
    var sections = {};
    Object.keys(manifestSections).forEach(function (manifestSectionKey) {
      sections[manifestSectionKey] = getSectionFromManifest(manifestSections[manifestSectionKey], manifestSectionKey, converterContext);
    });
    return sections;
  }
  /**
   * Create a manifest based custom section.
   * @param customSectionDefinition
   * @param sectionKey
   * @param converterContext
   * @returns {CustomObjectPageSection} The current custom section
   */


  function getSectionFromManifest(customSectionDefinition, sectionKey, converterContext) {
    var customSectionID = customSectionDefinition.id || CustomSectionID(sectionKey);
    var position = customSectionDefinition.position;

    if (!position) {
      position = {
        placement: Placement.After
      };
    }

    var manifestSubSections;

    if (!customSectionDefinition.subSections) {
      // If there is no subSection defined, we add the content of the custom section as subsections
      // and make sure to set the visibility to 'true', as the actual visibility is handled by the section itself
      manifestSubSections = _defineProperty({}, sectionKey, _objectSpread({}, customSectionDefinition, {
        position: undefined,
        visible: true
      }));
    } else {
      manifestSubSections = customSectionDefinition.subSections;
    }

    var subSections = createCustomSubSections(manifestSubSections, converterContext);
    var customSection = {
      id: customSectionID,
      key: sectionKey,
      title: customSectionDefinition.title,
      showTitle: !!customSectionDefinition.title,
      visible: customSectionDefinition.visible !== undefined ? customSectionDefinition.visible : true,
      position: position,
      subSections: insertCustomElements([], subSections, {
        "title": "overwrite",
        "actions": "merge"
      })
    };
    return customSection;
  }
  /**
   * Retrieves the ObjectPage header actions (both the default ones and the custom ones defined in the manifest).
   *
   * @param converterContext
   * @returns An array containing all the actions for this ObjectPage header
   */


  var getHeaderActions = function (converterContext) {
    var aAnnotationHeaderActions = getHeaderDefaultActions(converterContext);
    var manifestWrapper = converterContext.getManifestWrapper();
    var headerActions = insertCustomElements(aAnnotationHeaderActions, getActionsFromManifest(manifestWrapper.getHeaderActions(), converterContext, aAnnotationHeaderActions, undefined, undefined, getHiddenHeaderActions(converterContext)), {
      isNavigable: "overwrite",
      enabled: "overwrite",
      defaultValuesExtensionFunction: "overwrite"
    });
    return removeDuplicateActions(headerActions);
  };
  /**
   * Retrieves the ObjectPage footer actions (both the default ones and the custom ones defined in the manifest).
   *
   * @param converterContext
   * @returns An array containing all the actions for this ObjectPage footer
   */


  _exports.getHeaderActions = getHeaderActions;

  var getFooterActions = function (converterContext) {
    var manifestWrapper = converterContext.getManifestWrapper();
    var aAnnotationFooterActions = getFooterDefaultActions(manifestWrapper.getViewLevel(), converterContext);
    var footerActions = insertCustomElements(aAnnotationFooterActions, getActionsFromManifest(manifestWrapper.getFooterActions(), converterContext, aAnnotationFooterActions), {
      isNavigable: "overwrite",
      enabled: "overwrite",
      defaultValuesExtensionFunction: "overwrite"
    });
    return footerActions;
  };
  /**
   * Retrieves and merges the ObjectPage sections defined in the annotation and in the manifest.
   *
   * @param converterContext
   * @returns An array of sections.
   */


  _exports.getFooterActions = getFooterActions;

  var getSections = function (converterContext) {
    var manifestWrapper = converterContext.getManifestWrapper();
    return insertCustomElements(getSectionsFromAnnotation(converterContext), getSectionsFromManifest(manifestWrapper.getSections(), converterContext), {
      "title": "overwrite",
      "visible": "overwrite",
      "subSections": {
        "actions": "merge",
        "title": "overwrite",
        "sideContent": "overwrite"
      }
    });
  };

  _exports.getSections = getSections;

  var convertPage = function (converterContext) {
    var _entityType$annotatio4, _entityType$annotatio5;

    var manifestWrapper = converterContext.getManifestWrapper();
    var headerSection;
    var entityType = converterContext.getEntityType(); // Retrieve all header facets (from annotations & custom)

    var headerFacets = insertCustomElements(getHeaderFacetsFromAnnotations(converterContext), getHeaderFacetsFromManifest(manifestWrapper.getHeaderFacets())); // Retrieve the page header actions

    var headerActions = getHeaderActions(converterContext); // Retrieve the page footer actions

    var footerActions = getFooterActions(converterContext);

    if (manifestWrapper.isHeaderEditable() && (((_entityType$annotatio4 = entityType.annotations.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.HeaderFacets) || ((_entityType$annotatio5 = entityType.annotations.UI) === null || _entityType$annotatio5 === void 0 ? void 0 : _entityType$annotatio5.HeaderInfo))) {
      headerSection = createEditableHeaderSection(converterContext, headerFacets);
    }

    var sections = getSections(converterContext);
    return {
      template: TemplateType.ObjectPage,
      headerFacets: headerFacets,
      headerSection: headerSection,
      headerActions: headerActions,
      sections: sections,
      footerActions: footerActions,
      showHeader: manifestWrapper.getShowObjectPageHeader(),
      showAnchorBar: manifestWrapper.getShowAnchorBar(),
      useIconTabBar: manifestWrapper.useIconTabBar()
    };
  };

  _exports.convertPage = convertPage;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,