/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["./ManifestSettings", "./templates/ListReportConverter", "./templates/ObjectPageConverter", "./MetaModelConverter", "sap/fe/core/converters/helpers/IssueManager", "sap/base/util/merge", "./ConverterContext"], function (ManifestSettings, ListReportConverter, ObjectPageConverter, MetaModelConverter, IssueManager, merge, ConverterContext) {
  "use strict";

  var _exports = {};
  var IssueCategoryType = IssueManager.IssueCategoryType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertTypes = MetaModelConverter.convertTypes;
  var TemplateType = ManifestSettings.TemplateType;

  function handleErrorForCollectionFacets(oFacets, oDiagnostics, sEntitySetName, level) {
    oFacets.forEach(function (oFacet) {
      var Message = "For entity set " + sEntitySetName;

      if ((oFacet === null || oFacet === void 0 ? void 0 : oFacet.$Type) === "com.sap.vocabularies.UI.v1.CollectionFacet" && !(oFacet === null || oFacet === void 0 ? void 0 : oFacet.ID)) {
        var _IssueCategoryType$Fa;

        Message = Message + ", " + "level " + level + ", the collection facet does not have an ID.";
        oDiagnostics.addIssue(IssueCategory.Facets, IssueSeverity.High, Message, IssueCategoryType, IssueCategoryType === null || IssueCategoryType === void 0 ? void 0 : (_IssueCategoryType$Fa = IssueCategoryType.Facets) === null || _IssueCategoryType$Fa === void 0 ? void 0 : _IssueCategoryType$Fa.MissingID);
      }

      if ((oFacet === null || oFacet === void 0 ? void 0 : oFacet.$Type) === "com.sap.vocabularies.UI.v1.CollectionFacet" && level >= 3) {
        var _IssueCategoryType$Fa2;

        Message = Message + ", collection facet " + oFacet.Label + " is not supported at " + "level " + level;
        oDiagnostics.addIssue(IssueCategory.Facets, IssueSeverity.Medium, Message, IssueCategoryType, IssueCategoryType === null || IssueCategoryType === void 0 ? void 0 : (_IssueCategoryType$Fa2 = IssueCategoryType.Facets) === null || _IssueCategoryType$Fa2 === void 0 ? void 0 : _IssueCategoryType$Fa2.UnSupportedLevel);
      }

      if (oFacet === null || oFacet === void 0 ? void 0 : oFacet.Facets) {
        handleErrorForCollectionFacets(oFacet === null || oFacet === void 0 ? void 0 : oFacet.Facets, oDiagnostics, sEntitySetName, ++level);
        level = level - 1;
      }
    });
  }
  /**
   * Based on a template type, convert the metamodel and manifest definition into a json structure for the page.
   * @param {TemplateType} sTemplateType The template type
   * @param {ODataMetaModel} oMetaModel The odata model metaModel
   * @param {BaseManifestSettings} oManifestSettings The current manifest settings
   * @param {IDiagnostics} oDiagnostics The diagnostics wrapper
   * @param {string} sFullContextPath The context path to reach this page
   * @param oCapabilities
   * @returns {PageDefinition} The target page definition
   */


  function convertPage(sTemplateType, oMetaModel, oManifestSettings, oDiagnostics, sFullContextPath, oCapabilities) {
    var _oConverterOutput$ent;

    var oConverterOutput = convertTypes(oMetaModel, oCapabilities);
    oConverterOutput.diagnostics.forEach(function (annotationErrorDetail) {
      var checkIfIssueExists = oDiagnostics.checkIfIssueExists(IssueCategory.Annotation, IssueSeverity.High, annotationErrorDetail.message);

      if (!checkIfIssueExists) {
        oDiagnostics.addIssue(IssueCategory.Annotation, IssueSeverity.High, annotationErrorDetail.message);
      }
    });
    oConverterOutput === null || oConverterOutput === void 0 ? void 0 : (_oConverterOutput$ent = oConverterOutput.entityTypes) === null || _oConverterOutput$ent === void 0 ? void 0 : _oConverterOutput$ent.forEach(function (oEntitySet) {
      var _oEntitySet$annotatio, _oEntitySet$annotatio2;

      if (oEntitySet === null || oEntitySet === void 0 ? void 0 : (_oEntitySet$annotatio = oEntitySet.annotations) === null || _oEntitySet$annotatio === void 0 ? void 0 : (_oEntitySet$annotatio2 = _oEntitySet$annotatio.UI) === null || _oEntitySet$annotatio2 === void 0 ? void 0 : _oEntitySet$annotatio2.Facets) {
        var _oEntitySet$annotatio3, _oEntitySet$annotatio4;

        handleErrorForCollectionFacets(oEntitySet === null || oEntitySet === void 0 ? void 0 : (_oEntitySet$annotatio3 = oEntitySet.annotations) === null || _oEntitySet$annotatio3 === void 0 ? void 0 : (_oEntitySet$annotatio4 = _oEntitySet$annotatio3.UI) === null || _oEntitySet$annotatio4 === void 0 ? void 0 : _oEntitySet$annotatio4.Facets, oDiagnostics, oEntitySet === null || oEntitySet === void 0 ? void 0 : oEntitySet.name, 1);
      }
    });
    var sTargetEntitySetName = oManifestSettings.entitySet;
    var sContextPath = (oManifestSettings === null || oManifestSettings === void 0 ? void 0 : oManifestSettings.contextPath) || (sFullContextPath === "/" ? sFullContextPath + sTargetEntitySetName : sFullContextPath);
    var oContext = oMetaModel.createBindingContext(sContextPath);
    var oFullContext = getInvolvedDataModelObjects(oContext);

    if (oFullContext) {
      var oConvertedPage = {};

      switch (sTemplateType) {
        case TemplateType.ListReport:
        case TemplateType.AnalyticalListPage:
          oConvertedPage = ListReportConverter.convertPage(new ConverterContext(oConverterOutput, oManifestSettings, oDiagnostics, merge, oFullContext));
          break;

        case TemplateType.ObjectPage:
          oConvertedPage = ObjectPageConverter.convertPage(new ConverterContext(oConverterOutput, oManifestSettings, oDiagnostics, merge, oFullContext));
          break;
      }

      return oConvertedPage;
    }

    return undefined;
  }

  _exports.convertPage = convertPage;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,