/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["../../helpers/ID", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/formatters/TableFormatterTypes", "../../helpers/Aggregation", "sap/fe/core/converters/helpers/IssueManager", "./Criticality", "sap/fe/core/converters/helpers/SelectionVariantHelper"], function (ID, PropertyHelper, TableFormatterTypes, Aggregation, IssueManager, Criticality, SelectionVariantHelper) {
  "use strict";

  var _exports = {};
  var getFilterDefinitionsFromSelectionVariant = SelectionVariantHelper.getFilterDefinitionsFromSelectionVariant;
  var getMessageTypeFromCriticalityType = Criticality.getMessageTypeFromCriticalityType;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  var AggregationHelper = Aggregation.AggregationHelper;
  var MessageType = TableFormatterTypes.MessageType;
  var isPathExpression = PropertyHelper.isPathExpression;
  var KPIID = ID.KPIID;

  function createKPIDefinition(kpiName, kpiConfig, converterContext) {
    var _targetKPI$Detail;

    var kpiConverterContext = converterContext.getConverterContextFor("/" + kpiConfig.entitySet);
    var aKPIAnnotations = kpiConverterContext.getAnnotationsByTerm("UI", "com.sap.vocabularies.UI.v1.KPI");
    var targetKPI = aKPIAnnotations.find(function (kpi) {
      return kpi.qualifier === kpiConfig.qualifier;
    });
    var aggregationHelper = new AggregationHelper(kpiConverterContext.getEntityType(), kpiConverterContext);

    if (targetKPI && ((_targetKPI$Detail = targetKPI.Detail) === null || _targetKPI$Detail === void 0 ? void 0 : _targetKPI$Detail.DefaultPresentationVariant) && aggregationHelper.isAnalyticsSupported()) {
      var _targetValueProperty$, _targetValueProperty$3;

      var kpiID = KPIID(kpiName); // Datapoint

      var datapointAnnotation = targetKPI.DataPoint;
      var datapointProperty = datapointAnnotation.Value.$target;

      if (!aggregationHelper.isPropertyAggregatable(datapointProperty)) {
        // The main property of the KPI is not aggregatable --> We can't calculate its value so we ignore the KPI
        converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.MAIN_PROPERTY_NOT_AGGREGATABLE + kpiConfig.qualifier);
        return undefined;
      }

      var kpiDef = {
        id: kpiID,
        entitySet: kpiConfig.entitySet,
        datapoint: {
          propertyPath: datapointAnnotation.Value.path,
          annotationPath: kpiConverterContext.getEntitySetBasedAnnotationPath(datapointAnnotation.fullyQualifiedName)
        },
        selectionVariantFilterDefinitions: targetKPI.SelectionVariant ? getFilterDefinitionsFromSelectionVariant(targetKPI.SelectionVariant) : undefined
      }; // Unit or currency

      var targetValueProperty = datapointAnnotation.Value.$target;

      if ((_targetValueProperty$ = targetValueProperty.annotations.Measures) === null || _targetValueProperty$ === void 0 ? void 0 : _targetValueProperty$.ISOCurrency) {
        var _targetValueProperty$2;

        var currency = (_targetValueProperty$2 = targetValueProperty.annotations.Measures) === null || _targetValueProperty$2 === void 0 ? void 0 : _targetValueProperty$2.ISOCurrency;

        if (isPathExpression(currency)) {
          kpiDef.datapoint.unit = {
            value: currency.$target.name,
            isCurrency: true,
            isPath: true
          };
        } else {
          kpiDef.datapoint.unit = {
            value: currency.toString(),
            isCurrency: true,
            isPath: false
          };
        }
      } else if ((_targetValueProperty$3 = targetValueProperty.annotations.Measures) === null || _targetValueProperty$3 === void 0 ? void 0 : _targetValueProperty$3.Unit) {
        var _targetValueProperty$4;

        var unit = (_targetValueProperty$4 = targetValueProperty.annotations.Measures) === null || _targetValueProperty$4 === void 0 ? void 0 : _targetValueProperty$4.Unit;

        if (isPathExpression(unit)) {
          kpiDef.datapoint.unit = {
            value: unit.$target.name,
            isCurrency: false,
            isPath: true
          };
        } else {
          kpiDef.datapoint.unit = {
            value: unit.toString(),
            isCurrency: false,
            isPath: false
          };
        }
      } // Criticality


      if (datapointAnnotation.Criticality) {
        if (typeof datapointAnnotation.Criticality === "object") {
          // Criticality is a path --> check if the corresponding property is aggregatable
          var criticalityProperty = datapointAnnotation.Criticality.$target;

          if (aggregationHelper.isPropertyAggregatable(criticalityProperty)) {
            kpiDef.datapoint.criticalityPath = datapointAnnotation.Criticality.path;
          } else {
            // The property isn't aggregatable --> we ignore it
            kpiDef.datapoint.criticalityValue = MessageType.None;
          }
        } else {
          // Criticality is an enum Value --> get the corresponding static value
          kpiDef.datapoint.criticalityValue = getMessageTypeFromCriticalityType(datapointAnnotation.Criticality);
        }
      } else if (datapointAnnotation.CriticalityCalculation) {
        kpiDef.datapoint.criticalityCalculationMode = datapointAnnotation.CriticalityCalculation.ImprovementDirection;
        kpiDef.datapoint.criticalityCalculationThresholds = [];

        switch (kpiDef.datapoint.criticalityCalculationMode) {
          case "UI.ImprovementDirectionType/Target":
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeLowValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeLowValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeLowValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeHighValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeHighValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeHighValue);
            break;

          case "UI.ImprovementDirectionType/Minimize":
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeHighValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeHighValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeHighValue);
            break;

          case "UI.ImprovementDirectionType/Maximize":
          default:
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeLowValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeLowValue);
            kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeLowValue);
        }
      } else {
        kpiDef.datapoint.criticalityValue = MessageType.None;
      }

      return kpiDef;
    } else {
      var _targetKPI$Detail2;

      if (!targetKPI) {
        // Couldn't find a KPI with the qualifier specified in the manifest
        converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.KPI_NOT_FOUND + kpiConfig.qualifier);
      } else if (!((_targetKPI$Detail2 = targetKPI.Detail) === null || _targetKPI$Detail2 === void 0 ? void 0 : _targetKPI$Detail2.DefaultPresentationVariant)) {
        // No KPI detail/default presentation variant
        converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.KPI_DETAIL_NOT_FOUND + kpiConfig.qualifier);
      } else {
        // Entity doesn't support analytics
        converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.NO_ANALYTICS + kpiConfig.entitySet);
      }

      return undefined;
    }
  }
  /**
   * Creates the KPI definitions from the manifest and the annotations.
   *
   * @param {ConverterContext} converterContext The converter context for the page
   * @returns {KPIDefinition[]} Returns an array of KPI definitions
   */


  function getKPIDefinitions(converterContext) {
    var kpiConfigs = converterContext.getManifestWrapper().getKPIConfiguration(),
        kpiDefs = [];
    Object.keys(kpiConfigs).forEach(function (kpiName) {
      var oDef = createKPIDefinition(kpiName, kpiConfigs[kpiName], converterContext);

      if (oDef) {
        kpiDefs.push(oDef);
      }
    });
    return kpiDefs;
  }

  _exports.getKPIDefinitions = getKPIDefinitions;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,